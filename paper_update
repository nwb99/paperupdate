#!/usr/bin/env bash

#==========================================================
# YAPManTool Updater
# (c) 2022 Nathan "nwb99" Barnett, see LICENSE
# version 0.4.1
#
# requires bash (likely old v3 won't work.)
# on macOS, recommended to install newer bash using brew
#
# should this be done in Python? Probably.
#==========================================================

# $paper_builds_ext is different depending on function.
# When a function is selective of default/experimental, it is
# extracting such builds to a new array with same file name.

#TODO
# SOMEWHAT DONE - ERROR HANDLING. check every exit for error handling
# LOGGING
# COMMENTS
# DONE -LIST RECENT BUILDS/VERSIONS W/ CHANGELOGS
# check if Paper is running
# DONE - shasum
# DONE - get current paper jar build
# SOMEWHAT DONE - dont overwrite current file. mv to paper-old.jar. if shasum is the same, exit
# DONE - determine version and build without knowing version
# GNU Parallel to speed up version determination?
# script update checker
# catch interrupt ^C and cleanup

if [ "$(id -u)" -eq 0 ]
then
	echo "do not run this script as root"
	exit 1
fi

OS="$(uname -s)"

if [ "${OS}" != "Linux" ] && [ "${OS}" != "Darwin" ]
then
	echo "This script is meant to run only on Linux or macOS."
	exit 1
fi


paper_jar="paper.jar"
paper_path="."
tmp_dir="/tmp/paperupdate"
paper_api="https://papermc.io/api/v2"
paper_builds="${tmp_dir}/paper_builds.json"
paper_builds_ext="${tmp_dir}/paper_builds_ext.json"
paper_versions="${tmp_dir}/paper_versions.json"

prog_name="$(basename "${0}")"
formal_name="YAPManTool Updater"

script_ver="0.4.1"

# default flags which are changed by getopts
u_flag=false
b_flag=false
g_flag=false
f_flag=false
l_flag=false
L_flag=false
E_flag=false
no_ver_set=false

channel="default"


# generic error message template
error_msg() {
	echo -e "${prog_name}: ${1}\n" >&2
	exit 1
}

# is used in conjunction with error_msg()
error_option() {
	echo -e "option -- '${1}' requires '${2}'\n"
}

check_net() {
	# probably eliminate wget later
	if ! eval "wget -q --spider https://papermc.io"
	then
		error_msg "Could not ping papermc.io\nCheck your network connection."
	fi
}

# also needs sha256sum, but that should be in GNU coreutils
check_reqs() {
	req_progs=(curl jq wget)
	for prog in "${req_progs[@]}"
	do
		if ! command -v "${prog}" > /dev/null 2>&1		# check if program in list exists in PATH on system
		then
			error_msg "missing program '${prog}'\nThis utility requires the following programs (and GNU coreutils): ${req_progs[*]}"
		fi
	done
}

check_tmp() {
	if ! [ -d "${tmp_dir}" ]
	then
		mkdir -p "${tmp_dir}"
	fi
}

shasum_f() {
	if [ "${OS}" == "Darwin" ]
	then
		sha256="$(shasum -a256 "${paper_path}/${paper_jar}" | cut -d ' ' -f1)"
	else	
		sha256="$(sha256sum "${paper_path}/${paper_jar}" | cut -d ' ' -f1)"
	fi
	expected_sha256="$(curl -sX GET "${paper_api}/projects/paper/versions/${paper_ver}/builds/${build}" | jq -r '.downloads.application.sha256')"

	if [ "${sha256}" != "${expected_sha256}" ]
	then
		error_msg "SHA256 for downloaded Paper jar does not match what is expected."
	else
		echo "SHA256 matches. Done!"
		exit 0
	fi
}

get_ver_json() {
	# curl --fail flag isn't foolproof but is probably good enough. 301 redirect, for example returns 0.
	curl --fail -sX GET "${paper_api}/projects/paper/" | jq . > "${paper_versions}"
	if [ ! "${PIPESTATUS[0]}" -eq 0 ]	# not portable
	then
		if [ ! -s "${paper_versions}" ]
		then
			rm -f "${paper_versions}"	# I want to avoid rm if possible. There's likely a more elegant way.
		fi
		error_msg "curl: API error"
	fi

	version_count="$(< "${paper_versions}" jq -r '.versions[]' | wc -l)"
}

get_build_json() {
	curl --fail -sX GET "${paper_api}/projects/paper/versions/${paper_ver}/" | jq . > "${paper_builds}"
	if [ ! "${PIPESTATUS[0]}" -eq 0 ]
	then
		if [ ! -s "${paper_builds}" ]
		then
			rm -f "${paper_builds}"
		fi
		error_msg "curl: API error"
	fi

	build_count="$(< "${paper_builds}" jq -r '.builds[]' | wc -l)"
}

# verifies that version supplied with '-u' is available
valid_ver() {
	readarray -t versions < <(< ${paper_versions} jq -r '.versions[]')

	for i in "${versions[@]}"
	do
		if [ "${i}" != "${paper_ver}" ]
		then
			valid_version=false
			continue
		else
			valid_version=true
			break
		fi
	done

	if ! $valid_version
	then
		error_msg "${paper_ver}: not a valid Paper version"
	fi
}

valid_build_f() {
	# count backwards since wanted build may be newer
	readarray -t builds < <(< ${paper_builds} jq -r '.builds[]' | tac)

	for i in "${builds[@]}"
	do
		if [ "${i}" != "${build}" ]
		then
			valid_build=false
			continue
		else
			valid_build=true
			break
		fi
	done

	if ! $valid_build
	then
		error_msg "${paper_ver}: build ${paper_build}: not a valid Paper build"
	fi
}

get_build_count() {
	if [ "$E_flag" == "true" ]
	then
		curl --fail -sX GET "${paper_api}/projects/paper/versions/${paper_ver}/builds/" | jq '.builds | map(select(.channel=="experimental"))' > "${paper_builds_ext}"
	else
		curl --fail -sX GET "${paper_api}/projects/paper/versions/${paper_ver}/builds/" | jq '.builds | map(select(.channel=="default"))' > "${paper_builds_ext}"
	fi
		
	if [ ! "${PIPESTATUS[0]}" -eq 0 ]
	then
		if [ ! -s "${paper_builds}" ]
		then
			rm -f "${paper_builds}"
		fi
		error_msg "curl: API error"
	fi

	build_count=$(< "${paper_builds_ext}" jq -r '.[].build' | wc -l)
}

# the magic happens here
update() {
	get_ver_json

	if $no_ver_set
	then
		paper_ver="$(< "${paper_versions}" jq -r '.versions[-1]')"
	fi

	valid_ver
	get_build_count

	if [ "${E_flag}" == "true" ] && [ "${build_count}" -lt 1 ]
	then
		error_msg "Paper version ${paper_ver} has no experimental builds available."
	elif [ "${build_count}" -lt 1 ]
	then
		error_msg "Paper version ${paper_ver} has no builds available."
	fi

	# if '-b' is omitted, find newest build for given version (or newest version if '-u' is omitted)
	if ! $b_flag
	then
		build="$(< ${paper_builds_ext} jq -r '.[-1].build')"
	else
	 	build="${paper_build}"
		valid_build_f
	fi

	# check if exists and if '-f' force is supplied. Download JAR.
	if [ -s "${paper_path}/${paper_jar}" ] && ! $f_flag
	then
		error_msg "file "${paper_path}/${paper_jar}" already exists.\nUse option '-f' to force download."
	fi

	download_url="${paper_api}/projects/paper/versions/${paper_ver}/builds/${build}/downloads/paper-${paper_ver}-${build}.jar"

	if [ "$E_flag" == "true" ]
	then
		echo "Downloading Paper ${paper_ver} experimental build ${build} to \"${paper_path}/${paper_jar}\""
	else
		echo "Downloading Paper ${paper_ver} stable build ${build} to \"${paper_path}/${paper_jar}\""
	fi
		
	curl --create-dirs -o "${paper_path}/${paper_jar}" -L "${download_url}"
	shasum_f
}

# I don't think there's a better way.
# Compares SHA256 with all builds supplied by API then matches if found. Prints resulting build number.
cur_build() {
	if ! $g_flag
	then
		return
	fi

	if [ ! -f "${paper_path}/${paper_jar}" ]
	then
		error_msg "${paper_jar}: no such file"
	fi

	if [ "${OS}" == "Darwin" ]
	then
		sha256="$(shasum -a256 "${paper_path}/${paper_jar}" | cut -d ' ' -f1)"
	else	
		sha256="$(sha256sum "${paper_path}/${paper_jar}" | cut -d ' ' -f1)"
	fi

	get_ver_json
	
	printf "%s\n" "This might take a while."

	#thanks Daenyth! https://stackoverflow.com/a/3330834
	local k=1
	local sp="/-\|"
	
	for (( i=version_count-1; i>=0; --i ))
	do
		paper_ver="$(< "${paper_versions}" jq -r ".versions[$i]")"
		get_build_json
		curl -sX GET "${paper_api}/projects/paper/versions/${paper_ver}/builds/" | jq . > "${paper_builds_ext}"
		for (( j=build_count-1; j>=0; --j ))
		do
			
			#thanks Daenyth! https://stackoverflow.com/a/3330834
			echo -n ' '
		    printf "\b%s\r" "${sp:k++%${#sp}:1}"
			
			################################################################################	

			sha256_test="$(< ${paper_builds_ext} jq -r ".builds[$j].downloads.application.sha256")"
			cur_build_test="$(< ${paper_builds_ext} jq -r ".builds[$j].build")"
			if [ "${sha256}" = "${sha256_test}" ]
			then
				cur_channel_test="$(< "${paper_builds_ext}" jq -r ".builds[$j].channel")"
				echo "Current installed Paper ${paper_ver} ${cur_channel_test} build is ${cur_build_test}"
				exit 0
			else
				continue
			fi
		done
	done

	error_msg "could not determine build number."
}

list_versions() {
	if ! $l_flag
	then
		return
	fi

	curl --fail -sX GET "${paper_api}/projects/paper/" | jq -r '.versions[]'
	if [ ! "${PIPESTATUS[0]}" -eq 0 ]
	then
		error_msg "curl: API error"
	else
		exit 0
	fi

}

list_builds_e() {
	build="$(< "${paper_builds_ext}" jq -r ".[$1].build")"
	commit_hash="$(< "${paper_builds_ext}" jq -r ".[$1].changes[].commit")"
	build_summary="$(< "${paper_builds_ext}" jq -r ".[$1].changes[].summary")"

	echo -e "Build ${build}\n  Channel: ${channel}\n  Commit: ${commit_hash}\n  Summary: ${build_summary}\n"
}

list_builds() {
	if ! $L_flag
	then
		return
	fi

	if $no_ver_set
	then
		get_ver_json
		paper_ver="$(< ${paper_versions} jq -r '.versions[-1]')"
	fi

	valid_ver
	get_build_count
	
	if [ "${E_flag}" == "true" ] && [ "${build_count}" -lt 1 ]
	then
		error_msg "Paper ${paper_ver} has no experimental builds available."
	elif [ "${build_count}" -lt 1 ]
	then
		error_msg "Paper ${paper_ver} has no builds available."
	fi

	if [ "${build_count}" -ge 5 ]
	then
		build_count=5
	fi

	local build

	if [ "$E_flag" == "true" ]
	then
		printf "%s\n%s\n" "Paper ${paper_ver} (${build_count} most recent experimental builds)" "---------------"
	else
		printf "%s\n%s\n" "Paper ${paper_ver} (${build_count} most recent stable builds)" "---------------"
	fi
	
	if [ "$E_flag" == "true" ]
	then
		channel="experimental"
	else
		channel="default"
	fi
	
	# -1, -2, -3, -4, -5... (in this order since -1 is newest). jq can iterate in reverse
	for (( i=-1; i>=-build_count; --i ))
	do
		list_builds_e "$i"
	done

	exit 0
}

version() {
	echo "${formal_name} version ${script_ver}"
	exit 0
}

runChecks() {
	check_net
	check_reqs
	check_tmp
}

# there are some spaces mixed here so bash outputs formatting as expected
# first two are tabs, next two are spaces, thereafter tabs.
usage() {
	cat <<-EOF
	Usage: ${prog_name} [OPTIONS...]
	${formal_name} uses the PaperMC API to obtain build information
	and download requested version and build.
	
	Options required by another must precede.

	Examples:
	  ./${prog_name}	downloads newest version and newest stable build
	                             (if available, else will quit with error)

	  ./${prog_name} -u 1.12.2	omitted build number defaults to newest

	  ./${prog_name} -u 1.16.5 -b 793 -n "paper-793.jar" -o "~/paper"

	  -h		displays this help
	  -u		set the Paper version
	  -b		set the Paper build; requires -u (optional)
	  -g		get build of current Paper jar; -o and -n are optional
	  -n		set name for Paper jar; defaults to "paper.jar"
	  -o		set output location for download; defaults to current directory
	  -l		list Paper versions

	  -L		list last five Paper builds; 
	                 without -u, defaults to newest version

	  -f		overwrite existing Paper jar
	  -E		'experimental' builds only

	  -v		display version

EOF
exit 0
}

while getopts ":vhEu:b:gn:o:lLf" opt
do
	case ${opt} in
		v)
		 	version
			;;
		h)
			usage
			;;
		E)
			E_flag=true
			;;
		u)
			paper_ver="${OPTARG}"
			u_flag=true
			;;
		l)
			l_flag=true
			;;
		L)
			L_flag=true
			;;
		b)
			if ! $u_flag; then error_msg "$(error_option "b" "-u")"; fi
			paper_build="${OPTARG}"
			b_flag=true
			;;
		n)
			if ! $u_flag; then no_ver_set=true; fi
		 	paper_jar="${OPTARG}"
			if [ "${paper_jar##*.}" != "jar" ]
			then
				paper_jar="${paper_jar}.jar"
			fi
			;;
		o)
			if ! $u_flag; then no_ver_set=true; fi
			paper_path=$(realpath -s -m "${OPTARG/#\~/$HOME}")
			;;
		g)
			#if ! $u_flag; then error_msg "$(error_option "g" "-u")"; fi
			g_flag=true
			;;
		f)
			if $g_flag; then error_msg "option -- 'g' is exclusive"; fi
			if ! $u_flag; then no_ver_set=true; fi
			f_flag=true
			;;
		\?)
			error_msg "invalid option -- '${OPTARG}'\nUse '${prog_name} -h' to see help."
			;;
		:)
			error_msg "option -- '${OPTARG}' requires argument"
			;;
	esac
done
shift $((OPTIND - 1))

# no args
if [ ${OPTIND} -eq 1 ] || ! $u_flag
then
	no_ver_set=true
fi

runChecks
cur_build
list_versions
list_builds
update
